# -*- coding: utf-8 -*-
import pymysql.cursors, vk, time, json, requests

#####–ü–∞—Ä–∞–º–µ—Ç—Ä—ã MySQL######
HOST = "HOST"            #
USER = "USER"            #
PASSWORD = "PASSWORD"    #
DB = "DB"                #
##########################

BeautifulNumbers = {
	"1": "1Ô∏è‚É£",
	"2": "2Ô∏è‚É£",
	"3": "3Ô∏è‚É£",
	"4": "4Ô∏è‚É£",
	"5": "5Ô∏è‚É£",
}

def UserValidation(value):
    try:
        int(value)
        return True
    except ValueError:
        return False

#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∞–¥–º–∏–Ω–æ–≤
def CheckAdmin(d, value):
    for i in range(len(d)):
    	if int((d[i]["AdminVK"])) == value:
            return True
    return False

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –ë–î
def MySQLFetchOne(SQLString):
	
	connection = pymysql.connect(host=HOST,user=USER,password=PASSWORD,db=DB,cursorclass=pymysql.cursors.DictCursor)

	try:

	    with connection.cursor() as cursor:
	        cursor.execute(SQLString)
	        result = cursor.fetchone()
	finally:
	    connection.close()
	return result;

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ë–î
def MySQLFetchAll(SQLString):
	
	connection = pymysql.connect(host=HOST,user=USER,password=PASSWORD,db=DB,cursorclass=pymysql.cursors.DictCursor)
	try:
	    with connection.cursor() as cursor:
	        cursor.execute(SQLString)
	        result = cursor.fetchall()
	finally:
	    connection.close()
	return result;

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –¥—É–±–ª—è–∂)
def MySQLWriter(SQLString):
	connection = pymysql.connect(host=HOST,user=USER,password=PASSWORD,db=DB,cursorclass=pymysql.cursors.DictCursor)

	try:
	    with connection.cursor() as cursor:
	        cursor.execute(SQLString)
	    connection.commit()

	finally:
	    connection.close()

#–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VKSession = vk.Session(access_token=MySQLFetchOne("SELECT ServiceKey FROM ServiceTable WHERE ServiceName='VKAPIKey'")["ServiceKey"])
VKAdmins = (MySQLFetchAll("SELECT AdminVK FROM VKAdmins"))

SMSLogin = MySQLFetchOne("SELECT ServiceKey FROM ServiceTable WHERE ServiceName='SMSAeroLogin'")["ServiceKey"]
SMSAPIKey = MySQLFetchOne("SELECT ServiceKey FROM ServiceTable WHERE ServiceName='SMSAeroAPIKey'")["ServiceKey"]
SMSAuth = SMSLogin+":"+SMSAPIKey

api = vk.API(VKSession)
APIVersion = 5.73
message_longpoll = [0]

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–Ω–≥–ø—É–ª–∞
server = None
key    = None
ts     = None

SmsKeyboard = {
	"one_time":True,
	"buttons":[
		[
			{
			"action":{
				"type":"text",
				"payload":"{\"button\": \"1\"}",
				"label":"–î–∞"
			},
			"color":"primary"
			},

			{
			"action":{
				"type":"text",
				"payload":"{\"button\": \"2\"}",
				"label":"–ù–µ—Ç"
			},
			"color":"negative"
			},

		]
	]
}

UsersKeyboard = {
	"one_time":True,
	"buttons":[
		[
			{
			"action":{
				"type":"text",
				"payload":"{\"button\": \"1\"}",
				"label":"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ"
			},
			"color":"primary"
			},

			{
			"action":{
				"type":"text",
				"payload":"{\"button\": \"2\"}",
				"label":"–£–¥–∞–ª–µ–Ω–∏–µ"
			},
			"color":"primary"
			},

		]
	]
}


while True:

	#–§–∏–∫—Å –ª–æ–Ω–ø—É–ª–∞ –ø–æ —Ö–∞—Ä–¥—É
	if server == None:
		cfg = api.messages.getLongPollServer(v=APIVersion)
		server = cfg['server']
		key = cfg['key']
		ts = cfg['ts']

	response = requests.post(
		"https://{server}?act=a_check&key={key}&ts={ts}&wait=25&mode={mode}&version=2".format(**{
			"server": server,
            "key": key,
            "ts": ts,
            "mode": 2
        }),
    timeout=30
   	).json()

	checker = False
	for i in range(len(response['updates'])):
		if checker != True:
			try:
				
				message_longpoll = response['updates'][i][5]
				chat_longpoll = response['updates'][i][3]
				checker = True

			except:
				pass
	if checker == False:
		message_longpoll = [0]
		chat_longpoll = [0]

	ts = response['ts']

    #–ß–µ–∫–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if message_longpoll != [0]:
		if (CheckAdmin(VKAdmins,chat_longpoll) == True):
			all_url = "https://"+SMSAuth+"@gate.smsaero.ru/v2"

			if message_longpoll =='/balance':

				balance = str(requests.get(all_url+"/balance").json()["data"]["balance"])
				api.messages.send(user_id=chat_longpoll,message="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: "+balance+"‚ÇΩ",v=APIVersion)
			
			elif message_longpoll.split(" ")[0] == "/sms":
				try:
					SMSNumber = message_longpoll.split(" ")[1]
					SMSMessage = message_longpoll.split("&quot;")[1]
					api.messages.send(user_id=chat_longpoll,message="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ \""+SMSMessage+"\" –Ω–∞ –Ω–æ–º–µ—Ä "+SMSNumber+"?",keyboard=json.dumps(SmsKeyboard,ensure_ascii=False),v=APIVersion)
				except:
					api.messages.send(user_id=chat_longpoll,message="–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n/sms –Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞ \"–°–æ–æ–±—â–µ–Ω–∏–µ\"",v=APIVersion)

			elif message_longpoll == "–î–∞":

				sms = requests.get(all_url+"/sms/send?number="+SMSNumber+"&text="+SMSMessage+"&sign=SMS Aero&channel=DIRECT").json()
				if sms["success"]==True:
					SMSBalance = str(requests.get(all_url+"/balance").json()["data"]["balance"])
					api.messages.send(user_id=chat_longpoll,message="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: "+SMSBalance+"‚ÇΩ",v=APIVersion)
				else:
					api.messages.send(user_id=chat_longpoll,message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòî\n–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /sms",v=APIVersion)
				SMSNumber = "";
				SMSMessage = "";

			elif message_longpoll == "/history":
				history = requests.get(all_url+"/sms/list").json()["data"]
				OutMessage = ""
				for i in range(5):
					OutMessage += BeautifulNumbers[str(i+1)]+" +"+str(history[str(i)]["number"])+" \""+history[str(i)]["text"]+"\"\n\n"
				api.messages.send(user_id=chat_longpoll,message="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"+OutMessage,v=APIVersion)

			elif message_longpoll == "/help":
				CommandsText = "C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n/sms - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n/balance - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n/user - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" 
				api.messages.send(user_id=chat_longpoll,message=CommandsText,v=APIVersion)

			elif message_longpoll.split(" ")[0] == "/user":
				try:
					SMSUser = message_longpoll.split(" ")[1]
					if (UserValidation(SMSUser)==True):
						api.messages.send(user_id=chat_longpoll,message="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "+SMSUser+":",keyboard=json.dumps(UsersKeyboard,ensure_ascii=False),v=APIVersion)
					else:
						api.messages.send(user_id=chat_longpoll,message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",v=APIVersion)
				except:
					api.messages.send(user_id=chat_longpoll,message="–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n/user id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",v=APIVersion)

			elif message_longpoll == "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ":
				MySQLWriter("INSERT INTO VKAdmins(AdminVK) VALUES ('"+SMSUser+"')")
				api.messages.send(user_id=chat_longpoll,message="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+SMSUser+" —É—Å–ø–µ—à–Ω–æ",v=APIVersion)
				SMSUser = ""

			elif message_longpoll == "–£–¥–∞–ª–µ–Ω–∏–µ":
				MySQLWriter("DELETE FROM VKAdmins WHERE AdminVK = '"+SMSUser+"'")
				api.messages.send(user_id=chat_longpoll,message="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+SMSUser+" —É—Å–ø–µ—à–Ω–æ",v=APIVersion)
				SMSUser = ""
